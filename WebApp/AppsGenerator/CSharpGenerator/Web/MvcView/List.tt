<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata"#>
<#// include file="Imports.include.t4" #>
@model PagedList.IPagedList<#= "<" + ViewDataTypeName + ">" #>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewDataTypeShortName +" "+ ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<h2><#= ViewDataTypeShortName +" "+ ViewName#></h2>

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewDataTypeShortName +" "+ ViewName#></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<p>
    @Html.ActionLink("Create New", "Create",null, new { @class = "btn btn-primary" })
</p>
<table class="table">
    <tr>
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <th>
            @Html.DisplayNameFor(model => model.First().<#= GetValueExpression(property) #>)
        </th>
<#
    }
}
#>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <td>
            @Html.DisplayFor(modelItem => <#= "item." + GetValueExpression(property) #>)
        </td>
<#
    }
}

string pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
        <td>
             <div class="btn-group">
                <div class="btn-group">
                    <a href="#" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="true">
                        Options
                        <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu">
                        <li>
                            @Html.ActionLink("Edit", "Edit", new { id = item.<#= pkName #> })
                        </li>
                        <li>
                            @Html.ActionLink("Details", "Details", new {id=item.<#= pkName #> })
                        </li>
                        <li>
                            @Html.ActionLink("Delete", "Delete", new { id = item.<#= pkName #> })
                        </li>
                    </ul>
                </div>
            </div>
        </td>
<#
} else {
#>
        <td>
             <div class="btn-group">
                <div class="btn-group">
                    <a href="#" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="true">
                        Options
                        <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu">
                        <li>
                            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */  })
                        </li>
                        <li>
                            @Html.ActionLink("Details", "Details", new {/* id=item.PrimaryKey */  })
                        </li>
                        <li>
                            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */  })
                        </li>
                    </ul>
                </div>
            </div>
        </td>
<#
}
#>
    </tr>
}

</table>

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@include file="ModelMetadataFunctions.cs.include.t4" #>

<#+
    public string ViewDataTypeName{get;set;}
    public string ViewDataTypeShortName{get;set;}
    public bool IsPartialView{get;set;}
    public bool IsLayoutPageSelected{get;set;}
    public bool ReferenceScriptLibraries{get;set;}
    public bool IsBundleConfigPresent{get;set;}
    public string ViewName{get;set;}
    public string LayoutPageFile{get;set;}
    public string JQueryVersion{get;set;}
    public Version MvcVersion{get;set;}
    public ModelMetadata ModelMetadata{get;set;}
 #>
