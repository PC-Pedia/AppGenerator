<#@ template hostspecific="true" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="AppsGenerator.Classes.Code" #>
using System;
using System.Collections.Generic;

namespace <#= Namespace #>
{
    public partial class <#= entityType.Name #>
    {
<#
    var code = new CodeGenerator.CodeGenerationTools(this);
    
    var collectionNavigations = entityType.NavigationProperties.Where(
        np => np.DeclaringType == entityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(entityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in entityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>

        <#= CSharpGenerator.Code.CodeGenerator.Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in entityType.NavigationProperties.Where(np => np.DeclaringType == entityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>
    }
}

<#+
    public EntityType entityType{set;get;}
    public Version EntityFrameworkVersion{set;get;}
    public string Namespace{set;get;}
 #>